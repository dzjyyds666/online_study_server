// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: pb/cos.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cos_DeleteObject_FullMethodName          = "/proto.Cos/DeleteObject"
	Cos_CopyObject_FullMethodName            = "/proto.Cos/CopyObject"
	Cos_UploadClassCover_FullMethodName      = "/proto.Cos/UploadClassCover"
	Cos_AddVideoToLambdaQueue_FullMethodName = "/proto.Cos/AddVideoToLambdaQueue"
)

// CosClient is the client API for Cos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosClient interface {
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*CosCommonResponse, error)
	CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CosCommonResponse, error)
	UploadClassCover(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadClassCoverReq, UploadClassCoverResp], error)
	AddVideoToLambdaQueue(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (*CosCommonResponse, error)
}

type cosClient struct {
	cc grpc.ClientConnInterface
}

func NewCosClient(cc grpc.ClientConnInterface) CosClient {
	return &cosClient{cc}
}

func (c *cosClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*CosCommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CosCommonResponse)
	err := c.cc.Invoke(ctx, Cos_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosClient) CopyObject(ctx context.Context, in *CopyObjectRequest, opts ...grpc.CallOption) (*CosCommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CosCommonResponse)
	err := c.cc.Invoke(ctx, Cos_CopyObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosClient) UploadClassCover(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadClassCoverReq, UploadClassCoverResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cos_ServiceDesc.Streams[0], Cos_UploadClassCover_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadClassCoverReq, UploadClassCoverResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cos_UploadClassCoverClient = grpc.ClientStreamingClient[UploadClassCoverReq, UploadClassCoverResp]

func (c *cosClient) AddVideoToLambdaQueue(ctx context.Context, in *VideoInfo, opts ...grpc.CallOption) (*CosCommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CosCommonResponse)
	err := c.cc.Invoke(ctx, Cos_AddVideoToLambdaQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosServer is the server API for Cos service.
// All implementations must embed UnimplementedCosServer
// for forward compatibility.
type CosServer interface {
	DeleteObject(context.Context, *DeleteObjectRequest) (*CosCommonResponse, error)
	CopyObject(context.Context, *CopyObjectRequest) (*CosCommonResponse, error)
	UploadClassCover(grpc.ClientStreamingServer[UploadClassCoverReq, UploadClassCoverResp]) error
	AddVideoToLambdaQueue(context.Context, *VideoInfo) (*CosCommonResponse, error)
	mustEmbedUnimplementedCosServer()
}

// UnimplementedCosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCosServer struct{}

func (UnimplementedCosServer) DeleteObject(context.Context, *DeleteObjectRequest) (*CosCommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedCosServer) CopyObject(context.Context, *CopyObjectRequest) (*CosCommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedCosServer) UploadClassCover(grpc.ClientStreamingServer[UploadClassCoverReq, UploadClassCoverResp]) error {
	return status.Errorf(codes.Unimplemented, "method UploadClassCover not implemented")
}
func (UnimplementedCosServer) AddVideoToLambdaQueue(context.Context, *VideoInfo) (*CosCommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoToLambdaQueue not implemented")
}
func (UnimplementedCosServer) mustEmbedUnimplementedCosServer() {}
func (UnimplementedCosServer) testEmbeddedByValue()             {}

// UnsafeCosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosServer will
// result in compilation errors.
type UnsafeCosServer interface {
	mustEmbedUnimplementedCosServer()
}

func RegisterCosServer(s grpc.ServiceRegistrar, srv CosServer) {
	// If the following call pancis, it indicates UnimplementedCosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cos_ServiceDesc, srv)
}

func _Cos_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cos_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_CopyObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).CopyObject(ctx, req.(*CopyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cos_UploadClassCover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CosServer).UploadClassCover(&grpc.GenericServerStream[UploadClassCoverReq, UploadClassCoverResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cos_UploadClassCoverServer = grpc.ClientStreamingServer[UploadClassCoverReq, UploadClassCoverResp]

func _Cos_AddVideoToLambdaQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosServer).AddVideoToLambdaQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cos_AddVideoToLambdaQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosServer).AddVideoToLambdaQueue(ctx, req.(*VideoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Cos_ServiceDesc is the grpc.ServiceDesc for Cos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cos",
	HandlerType: (*CosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteObject",
			Handler:    _Cos_DeleteObject_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _Cos_CopyObject_Handler,
		},
		{
			MethodName: "AddVideoToLambdaQueue",
			Handler:    _Cos_AddVideoToLambdaQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadClassCover",
			Handler:       _Cos_UploadClassCover_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/cos.proto",
}
