// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: pb/user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_AddStudentToClass_FullMethodName      = "/proto.user/AddStudentToClass"
	User_BatchAddStudentToClass_FullMethodName = "/proto.user/BatchAddStudentToClass"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	AddStudentToClass(ctx context.Context, in *AddStudentToClassRequest, opts ...grpc.CallOption) (*UserCommonResponse, error)
	BatchAddStudentToClass(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, StudentIds], error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddStudentToClass(ctx context.Context, in *AddStudentToClassRequest, opts ...grpc.CallOption) (*UserCommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCommonResponse)
	err := c.cc.Invoke(ctx, User_AddStudentToClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BatchAddStudentToClass(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, StudentIds], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_BatchAddStudentToClass_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, StudentIds]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_BatchAddStudentToClassClient = grpc.ClientStreamingClient[FileChunk, StudentIds]

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	AddStudentToClass(context.Context, *AddStudentToClassRequest) (*UserCommonResponse, error)
	BatchAddStudentToClass(grpc.ClientStreamingServer[FileChunk, StudentIds]) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) AddStudentToClass(context.Context, *AddStudentToClassRequest) (*UserCommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentToClass not implemented")
}
func (UnimplementedUserServer) BatchAddStudentToClass(grpc.ClientStreamingServer[FileChunk, StudentIds]) error {
	return status.Errorf(codes.Unimplemented, "method BatchAddStudentToClass not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddStudentToClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentToClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddStudentToClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddStudentToClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddStudentToClass(ctx, req.(*AddStudentToClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BatchAddStudentToClass_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).BatchAddStudentToClass(&grpc.GenericServerStream[FileChunk, StudentIds]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type User_BatchAddStudentToClassServer = grpc.ClientStreamingServer[FileChunk, StudentIds]

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStudentToClass",
			Handler:    _User_AddStudentToClass_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchAddStudentToClass",
			Handler:       _User_BatchAddStudentToClass_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/user.proto",
}
